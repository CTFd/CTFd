import{m as i}from"./module.esm.860ebcbd.js";import{c as r,C as o,e as n}from"./base.29aca91b.js";import{g as l}from"./userscore.91901217.js";import"./duration.21bcce5f.js";import"./echarts.4cc66d9c.js";import"./notificationCounter.4f4e1e9f.js";import"./scoreboard.326bd4d6.js";window.Alpine=i;i.data("TeamGraphs",()=>({solves:{data:[]},fails:{data:[]},awards:{data:[]},solveCount:0,failCount:0,awardCount:0,getSolvePercentage(){let t=this.solveCount/(this.solveCount+this.failCount)*100;return Math.round(t)},getFailPercentage(){let t=this.failCount/(this.solveCount+this.failCount)*100;return Math.round(t)},getCategoryBreakdown(){let t=[],e={};this.solves.data.map(a=>{t.push(a.challenge.category)}),t.forEach(a=>{a in e?e[a]+=1:e[a]=1});let s=[];for(const a in e)s.push({name:a,count:e[a],percent:e[a]/t.length*100,color:r(a)});return s},async init(){const t=window.TEAM?window.TEAM.id:"me";this.solves=await o.pages.teams.teamSolves(t),this.fails=await o.pages.teams.teamFails(t),this.awards=await o.pages.teams.teamAwards(t),this.solveCount=this.solves.meta.count,this.failCount=this.fails.meta.count,this.awardCount=this.awards.meta.count;const e=window.TEAM||o.team;let s=l(e.id,e.name,this.solves.data,this.awards.data);this.$refs.scoregraph&&n(this.$refs.scoregraph,s)}}));i.start();
